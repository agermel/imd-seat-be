// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.3

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	reservationFieldNames          = builder.RawFieldNames(&Reservation{})
	reservationRows                = strings.Join(reservationFieldNames, ",")
	reservationRowsExpectAutoSet   = strings.Join(stringx.Remove(reservationFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	reservationRowsWithPlaceHolder = strings.Join(stringx.Remove(reservationFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	reservationModel interface {
		Insert(ctx context.Context, data *Reservation) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Reservation, error)
		Update(ctx context.Context, data *Reservation) error
		Delete(ctx context.Context, id int64) error
	}

	defaultReservationModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Reservation struct {
		Id        int64     `db:"id"`         // 预约 ID
		StudentId string    `db:"student_id"` // 学号
		Type      string    `db:"type"`       // 预约类型
		Date      time.Time `db:"date"`       // 预约日期
		Room      string    `db:"room"`       // 房间
		Seat      string    `db:"seat"`       // 座位编号
		Status    string    `db:"status"`     // 预约状态
	}
)

func newReservationModel(conn sqlx.SqlConn) *defaultReservationModel {
	return &defaultReservationModel{
		conn:  conn,
		table: "`reservation`",
	}
}

func (m *defaultReservationModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultReservationModel) FindOne(ctx context.Context, id int64) (*Reservation, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", reservationRows, m.table)
	var resp Reservation
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultReservationModel) Insert(ctx context.Context, data *Reservation) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?)", m.table, reservationRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.StudentId, data.Type, data.Date, data.Room, data.Seat, data.Status)
	return ret, err
}

func (m *defaultReservationModel) Update(ctx context.Context, data *Reservation) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, reservationRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.StudentId, data.Type, data.Date, data.Room, data.Seat, data.Status, data.Id)
	return err
}

func (m *defaultReservationModel) tableName() string {
	return m.table
}
