// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.3

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	roomFieldNames          = builder.RawFieldNames(&Room{})
	roomRows                = strings.Join(roomFieldNames, ",")
	roomRowsExpectAutoSet   = strings.Join(stringx.Remove(roomFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	roomRowsWithPlaceHolder = strings.Join(stringx.Remove(roomFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	roomModel interface {
		Insert(ctx context.Context, data *Room) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Room, error)
		Update(ctx context.Context, data *Room) error
		Delete(ctx context.Context, id int64) error
	}

	defaultRoomModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Room struct {
		Id     int64  `db:"id"`     // 房间 ID
		Room   string `db:"room"`   // 房间
		Status string `db:"status"` // 预约状态
	}
)

func newRoomModel(conn sqlx.SqlConn) *defaultRoomModel {
	return &defaultRoomModel{
		conn:  conn,
		table: "`room`",
	}
}

func (m *defaultRoomModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultRoomModel) FindOne(ctx context.Context, id int64) (*Room, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", roomRows, m.table)
	var resp Room
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultRoomModel) Insert(ctx context.Context, data *Room) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?)", m.table, roomRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Room, data.Status)
	return ret, err
}

func (m *defaultRoomModel) Update(ctx context.Context, data *Room) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, roomRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Room, data.Status, data.Id)
	return err
}

func (m *defaultRoomModel) tableName() string {
	return m.table
}
