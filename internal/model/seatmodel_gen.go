// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.3

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	seatFieldNames          = builder.RawFieldNames(&Seat{})
	seatRows                = strings.Join(seatFieldNames, ",")
	seatRowsExpectAutoSet   = strings.Join(stringx.Remove(seatFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	seatRowsWithPlaceHolder = strings.Join(stringx.Remove(seatFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	seatModel interface {
		Insert(ctx context.Context, data *Seat) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Seat, error)
		FindOneBySeatRoomDate(ctx context.Context, seat string, room string, date time.Time) (*Seat, error)
		Update(ctx context.Context, data *Seat) error
		Delete(ctx context.Context, id int64) error
	}

	defaultSeatModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Seat struct {
		Id     int64     `db:"id"`     // 主键 ID，自增
		Seat   string    `db:"seat"`   // 座位编号
		Room   string    `db:"room"`   // 房间名称
		Date   time.Time `db:"date"`   // 预约日期
		Status string    `db:"status"` // 状态，如 available/booked
	}
)

func newSeatModel(conn sqlx.SqlConn) *defaultSeatModel {
	return &defaultSeatModel{
		conn:  conn,
		table: "`seat`",
	}
}

func (m *defaultSeatModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultSeatModel) FindOne(ctx context.Context, id int64) (*Seat, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", seatRows, m.table)
	var resp Seat
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultSeatModel) FindOneBySeatRoomDate(ctx context.Context, seat string, room string, date time.Time) (*Seat, error) {
	var resp Seat
	query := fmt.Sprintf("select %s from %s where `seat` = ? and `room` = ? and `date` = ? limit 1", seatRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, seat, room, date)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultSeatModel) Insert(ctx context.Context, data *Seat) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?)", m.table, seatRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Seat, data.Room, data.Date, data.Status)
	return ret, err
}

func (m *defaultSeatModel) Update(ctx context.Context, newData *Seat) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, seatRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.Seat, newData.Room, newData.Date, newData.Status, newData.Id)
	return err
}

func (m *defaultSeatModel) tableName() string {
	return m.table
}
